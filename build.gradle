/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.2/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library

plugins {
    id "com.dorongold.task-tree" version "1.3"
}

apply plugin: 'java-library'

group 'com.github.clarkdo'
version '1.0.0'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion
ext.moduleName = 'com.github.clarkdo.jdk'

def checkstyleConfigDir = new File(rootDir, 'config/checkstyle')

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:22.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}
subprojects {
    apply plugin: 'checkstyle'
    checkstyle {
        configFile = new File(checkstyleConfigDir, "google_checks.xml")
        configProperties.checkstyleConfigDir = checkstyleConfigDir
        toolVersion = 8.2
    }
    tasks.withType(Checkstyle) {
        exclude '**/module-info.java'
    }
    afterEvaluate {
        repositories {
            jcenter()
        }

        compileJava {
            doFirst {
                classpath = files()
                options.compilerArgs = [
                        '--module-path', configurations.compileClasspath.asPath,
                        '-d', "${sourceSets.main.java.outputDir}/$moduleName"
                ]
                options.sourcepath = files(sourceSets.main.java.srcDirs)
            }
            doLast {
                copy {
                    from "${sourceSets.main.java.outputDir}/$moduleName"
                    into sourceSets.main.java.outputDir
                }
            }
        }

        compileTestJava {
            doFirst {
                classpath = files()
                options.compilerArgs = [
                        '--module-path', files(sourceSets.main.java.outputDir, configurations.testCompileClasspath).asPath,
                        '--add-modules', "junit,hamcrest.core",
                        '--add-reads', "$moduleName=junit,hamcrest.core",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
            }
        }

        test {
            doFirst {
                classpath = files()
                jvmArgs = [
                        '--module-path', files(sourceSets.main.java.outputDir, configurations.testRuntimeClasspath).asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit,hamcrest.core",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
            }
        }
    }
}
task checkstyleAggregate {
    description 'Aggregate Checkstyle reports and produce combined HTML report'
    doLast {
        def reportFiles = fileTree(rootDir).include('**/checkstyle/main.xml', '**/checkstyle/test.xml')
        def reportDir = new File("${project.buildDir}/reports/checkstyle")
        if (!reportDir.exists()) {
            reportDir.mkdirs()
        }
        def file = new File("${reportDir}/aggregate.xml")
        def fileElemWriter = new PrintWriter(file)
        fileElemWriter.print('<checkstyle version="8.2">')
        def fileElemXml = new XmlNodePrinter(fileElemWriter)
        reportFiles.each { reportFile ->
            new XmlParser().parse(reportFile).file.each { fileElemXml.print(it) }
        }
        fileElemWriter.print('</checkstyle>')
        fileElemWriter.flush()
        ant.xslt(in: file, style: "${checkstyleConfigDir}/checkstyle.xsl", out: "${reportDir}/checkstyle.html")
    }
}

checkstyleAggregate.dependsOn { subprojects.check }

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects.collect { it.tasks.withType(Test) }
}